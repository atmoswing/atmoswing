/** 
 *
 *  This file is part of the AtmoSwing software.
 *
 *  Copyright (c) 2008-2012  University of Lausanne, Pascal Horton (pascal.horton@unil.ch). 
 *  All rights reserved.
 *
 *  THIS CODE, SOFTWARE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY  
 *  OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
 *  PURPOSE.
 *
 */
 
#ifndef __asFramePlotTimeSeries__
#define __asFramePlotTimeSeries__

/**
@file
Subclass of asFramePlotTimeSeries, which is generated by wxFormBuilder.
*/

#include "AtmoswingViewerGui.h"
#include "asPanelPlot.h"

class asForecastManager;

/** Implementing asFramePlotTimeSeries */
class asFramePlotTimeSeries : public asFramePlotTimeSeriesVirtual
{
public:
    /** Constructor */
    asFramePlotTimeSeries( wxWindow* parent, int selectedForecast, int selectedStation, asForecastManager *forecastManager, wxWindowID id=asWINDOW_PLOTS_TIMESERIES );
    /** Destructor */
    ~asFramePlotTimeSeries();

    void Init();
    bool Plot();


protected:


private:
    enum PlotData
    {
        ClassicPercentiles,
        AllPercentiles,
        AllAnalogs,
        BestAnalogs10,
        BestAnalogs5,
        ClassicReturnPeriod,
        AllReturnPeriods,
        PreviousForecasts,
        Interpretation
    };

    asPanelPlot *m_PanelPlot;
    asForecastManager *m_ForecastManager;
    int m_SelectedStation;
    int m_SelectedForecast;
    float m_MaxVal;
    VectorDouble m_LeadTimes;

    void OnClose( wxCloseEvent& evt );
    void OnTocSelectionChange( wxCommandEvent& event );
    void OnExportTXT( wxCommandEvent& event );
    void OnExportSVG( wxCommandEvent& event );
    void OnPreview( wxCommandEvent& event );
    void OnPrint( wxCommandEvent& event );
    void InitCheckListBox();
    void InitPlotCtrl();
    void PlotAllReturnPeriods();
    void PlotReturnPeriod(int returnPeriod);
    void PlotAllAnalogs();
    void PlotBestAnalogs(int pointsNb);
    void PlotClassicPercentiles();
    void PlotPastForecasts();
    void PlotPastForecast(int i);
    void PlotAllPercentiles();
    void PlotInterpretation();

    DECLARE_EVENT_TABLE()
};

#endif // __asFramePlotTimeSeries__
