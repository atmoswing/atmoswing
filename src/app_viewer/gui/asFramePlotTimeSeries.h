/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can read the License at http://opensource.org/licenses/CDDL-1.0
 * See the License for the specific language governing permissions
 * and limitations under the License.
 * 
 * When distributing Covered Code, include this CDDL Header Notice in 
 * each file and include the License file (licence.txt). If applicable, 
 * add the following below this CDDL Header, with the fields enclosed
 * by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 * 
 * The Original Software is AtmoSwing. The Initial Developer of the 
 * Original Software is Pascal Horton of the University of Lausanne. 
 * All Rights Reserved.
 * 
 */

/*
 * Portions Copyright 2008-2013 University of Lausanne.
 */
 
#ifndef __asFramePlotTimeSeries__
#define __asFramePlotTimeSeries__

/**
@file
Subclass of asFramePlotTimeSeries, which is generated by wxFormBuilder.
*/

#include "AtmoswingViewerGui.h"
#include "asPanelPlot.h"

class asForecastManager;

/** Implementing asFramePlotTimeSeries */
class asFramePlotTimeSeries : public asFramePlotTimeSeriesVirtual
{
public:
    /** Constructor */
    asFramePlotTimeSeries( wxWindow* parent, int selectedMethod, int selectedForecast, int selectedStation, asForecastManager *forecastManager, wxWindowID id=asWINDOW_PLOTS_TIMESERIES );
    /** Destructor */
    ~asFramePlotTimeSeries();

    void Init();
    bool Plot();


protected:


private:
    enum PlotData
    {
        ClassicPercentiles,
        AllPercentiles,
        AllAnalogs,
        BestAnalogs10,
        BestAnalogs5,
        ClassicReturnPeriod,
        AllReturnPeriods,
        PreviousForecasts,
        Interpretation
    };

    asPanelPlot *m_PanelPlot;
    asForecastManager *m_ForecastManager;
    int m_SelectedStation;
    int m_SelectedMethod;
    int m_SelectedForecast;
    float m_MaxVal;
    VectorDouble m_LeadTimes;

    void OnClose( wxCloseEvent& evt );
    void OnTocSelectionChange( wxCommandEvent& event );
    void OnExportTXT( wxCommandEvent& event );
    void OnExportSVG( wxCommandEvent& event );
    void OnPreview( wxCommandEvent& event );
    void OnPrint( wxCommandEvent& event );
    void InitCheckListBox();
    void InitPlotCtrl();
    void PlotAllReturnPeriods();
    void PlotReturnPeriod(int returnPeriod);
    void PlotAllAnalogs();
    void PlotBestAnalogs(int pointsNb);
    void PlotClassicPercentiles();
    void PlotPastForecasts();
    void PlotPastForecast(int i);
    void PlotAllPercentiles();
    void PlotInterpretation();

    DECLARE_EVENT_TABLE()
};

#endif // __asFramePlotTimeSeries__
