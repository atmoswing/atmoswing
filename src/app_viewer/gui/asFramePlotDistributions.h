/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can read the License at http://opensource.org/licenses/CDDL-1.0
 * See the License for the specific language governing permissions
 * and limitations under the License.
 * 
 * When distributing Covered Code, include this CDDL Header Notice in 
 * each file and include the License file (licence.txt). If applicable, 
 * add the following below this CDDL Header, with the fields enclosed
 * by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 * 
 * The Original Software is AtmoSwing. The Initial Developer of the 
 * Original Software is Pascal Horton of the University of Lausanne. 
 * All Rights Reserved.
 * 
 */

/*
 * Portions Copyright 2008-2013 University of Lausanne.
 */
 
#ifndef __asFramePlotDistributions__
#define __asFramePlotDistributions__

/**
@file
Subclass of asFramePlotDistributions, which is generated by wxFormBuilder.
*/

#include "AtmoswingViewerGui.h"
#include "asPanelPlot.h"

class asForecastManager;

/** Implementing asFramePlotDistributions */
class asFramePlotDistributions : public asFramePlotDistributionsVirutal
{
public:
    /** Constructor */
    asFramePlotDistributions( wxWindow* parent, int selectedForecast, asForecastManager *forecastManager, wxWindowID id=asWINDOW_PLOTS_DISTRIBUTIONS );
    /** Destructor */
    ~asFramePlotDistributions();

    void Init();
    bool Plot();
    bool PlotPredictands();
    bool PlotCriteria();

protected:


private:
    enum PlotPredictandsData
    {
        ClassicPercentiles,
        AllAnalogsPoints,
        AllAnalogsCurve,
        BestAnalogs10Points,
        BestAnalogs10Curve,
        BestAnalogs5Points,
        BestAnalogs5Curve,
        ClassicReturnPeriod,
        AllReturnPeriods
    };

    asPanelPlot *m_PanelPlotPredictands;
    asPanelPlot *m_PanelPlotCriteria;
    asForecastManager *m_ForecastManager;
    int m_SelectedForecast;
    int m_SelectedStation;
    int m_SelectedDate;
    int m_XmaxPredictands;

    void InitPredictandsCheckListBox();
    void InitPredictandsPlotCtrl();
    void InitCriteriaPlotCtrl();
    void PlotAllReturnPeriods();
    void PlotReturnPeriod(int returnPeriod);
    void PlotAllAnalogsPoints();
    void PlotAllAnalogsCurve();
    void PlotBestAnalogsPoints(int analogsNb);
    void PlotBestAnalogsCurve(int analogsNb);
    void PlotClassicPercentiles();
    void PlotCriteriaCurve();
    void OnChoiceForecastChange( wxCommandEvent& event );
    void OnChoiceStationChange( wxCommandEvent& event );
    void OnChoiceDateChange( wxCommandEvent& event );
    void OnTocSelectionChange( wxCommandEvent& event );
    void OnClose( wxCloseEvent& evt );

    DECLARE_EVENT_TABLE()
};

#endif // __asFramePlotDistributions__
