/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can read the License at http://opensource.org/licenses/CDDL-1.0
 * See the License for the specific language governing permissions
 * and limitations under the License.
 * 
 * When distributing Covered Code, include this CDDL Header Notice in 
 * each file and include the License file (licence.txt). If applicable, 
 * add the following below this CDDL Header, with the fields enclosed
 * by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 * 
 * The Original Software is AtmoSwing. The Initial Developer of the 
 * Original Software is Pascal Horton of the University of Lausanne. 
 * All Rights Reserved.
 * 
 */

/*
 * Portions Copyright 2008-2013 University of Lausanne.
 */
 
#ifndef __asPanelForecastingModel__
#define __asPanelForecastingModel__

/**
@file
Subclass of asPanelForecastingModelVirtual, which is generated by wxFormBuilder.
*/

#include "AtmoswingForecasterGui.h"
#include "img_bullets.h"

//// end generated include

class asPanelsManagerForecastingModels;
class asFileForecastingModels;

/** Implementing asPanelForecastingModel */
class asPanelForecastingModel : public asPanelForecastingModelVirtual
{
public:
    /** Constructor */
    asPanelForecastingModel( wxWindow* parent );

    virtual bool Layout();

    awxLed* GetLed()
    {
        return m_Led;
    }

    void SetPanelsManager(asPanelsManagerForecastingModels* panelManager)
    {
        m_PanelsManager = panelManager;
    }

    bool GenerateXML( asFileForecastingModels &file );

    void ReducePanel();

    wxString GetModelName()
    {
        return m_TextCtrlModelName->GetValue();
    }

    void SetModelName(const wxString &val)
    {
        m_TextCtrlModelName->SetValue(val);
        m_StaticTextModelName->SetLabelText(val);
    }

    wxString GetModelDescription()
    {
        return m_TextCtrlModelDescription->GetValue();
    }

    void SetModelDescription(const wxString &val)
    {
        m_TextCtrlModelDescription->SetValue(val);
    }

    wxString GetParametersFileName()
    {
        return m_TextCtrlParametersFileName->GetValue();
    }

    void SetParametersFileName(const wxString &val)
    {
        m_TextCtrlParametersFileName->SetValue(val);
    }

    wxString GetPredictandDBName()
    {
        return m_TextCtrlPredictandDB->GetValue();
    }

    void SetPredictandDBName(const wxString &val)
    {
        m_TextCtrlPredictandDB->SetValue(val);
    }

    wxString GetPredictorsArchiveDir()
    {
        return m_DirPickerPredictorsArchive->GetPath();
    }

    void SetPredictorsArchiveDir(const wxString &val)
    {
        m_DirPickerPredictorsArchive->SetPath(val);
    }

protected:
    bool m_Reduced;
    wxWindow* m_ParentFrame;

    void ReducePanel( wxCommandEvent& event );
    void ClosePanel( wxCommandEvent& event );
    void ChangeModelName( wxCommandEvent& event );



private:
    asPanelsManagerForecastingModels* m_PanelsManager;
};

#endif // __asPanelForecastingModel__
