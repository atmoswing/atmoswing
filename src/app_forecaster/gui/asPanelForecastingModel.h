/** 
 *
 *  This file is part of the AtmoSwing software.
 *
 *  Copyright (c) 2008-2012  University of Lausanne, Pascal Horton (pascal.horton@unil.ch). 
 *  All rights reserved.
 *
 *  THIS CODE, SOFTWARE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY  
 *  OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
 *  PURPOSE.
 *
 */
 
#ifndef __asPanelForecastingModel__
#define __asPanelForecastingModel__

/**
@file
Subclass of asPanelForecastingModelVirtual, which is generated by wxFormBuilder.
*/

#include "AtmoswingForecasterGui.h"
#include "img_bullets.h"

//// end generated include

class asPanelsManagerForecastingModels;
class asFileForecastingModels;

/** Implementing asPanelForecastingModel */
class asPanelForecastingModel : public asPanelForecastingModelVirtual
{
public:
    /** Constructor */
    asPanelForecastingModel( wxWindow* parent );

    virtual bool Layout();

    awxLed* GetLed()
    {
        return m_Led;
    }

    void SetPanelsManager(asPanelsManagerForecastingModels* panelManager)
    {
        m_PanelsManager = panelManager;
    }

    bool GenerateXML( asFileForecastingModels &file );

    void ReducePanel();

    wxString GetModelName()
    {
        return m_TextCtrlModelName->GetValue();
    }

    void SetModelName(const wxString &val)
    {
        m_TextCtrlModelName->SetValue(val);
        m_StaticTextModelName->SetLabelText(val);
    }

    wxString GetModelDescription()
    {
        return m_TextCtrlModelDescription->GetValue();
    }

    void SetModelDescription(const wxString &val)
    {
        m_TextCtrlModelDescription->SetValue(val);
    }

    wxString GetParametersFileName()
    {
        return m_TextCtrlParametersFileName->GetValue();
    }

    void SetParametersFileName(const wxString &val)
    {
        m_TextCtrlParametersFileName->SetValue(val);
    }

    wxString GetPredictandDBName()
    {
        return m_TextCtrlPredictandDB->GetValue();
    }

    void SetPredictandDBName(const wxString &val)
    {
        m_TextCtrlPredictandDB->SetValue(val);
    }

    wxString GetPredictorsArchiveDir()
    {
        return m_DirPickerPredictorsArchive->GetPath();
    }

    void SetPredictorsArchiveDir(const wxString &val)
    {
        m_DirPickerPredictorsArchive->SetPath(val);
    }

protected:
    bool m_Reduced;
    wxWindow* parentFrame;

    void ReducePanel( wxCommandEvent& event );
    void ClosePanel( wxCommandEvent& event );
    void ChangeModelName( wxCommandEvent& event );



private:
    asPanelsManagerForecastingModels* m_PanelsManager;
};

#endif // __asPanelForecastingModel__
