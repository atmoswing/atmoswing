name: Code coverage

on:
  push:
    branches:
      - main
      - dev
      - feature/*
      - tests-coverage-gui

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  code-coverage:
    runs-on: ubuntu-22.04

    env:
      PROJ_DATA: ${{github.workspace}}/bin/share/proj
      PROJ_LIB: ${{github.workspace}}/bin/share/proj

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system libraries
        run: |
          sudo apt-get update
          sudo apt-get install lcov xvfb

      - name: Cache Conan libs
        id: cache-conan
        uses: pat-s/always-upload-cache@v3.0.11
        with:
          path: /home/runner/.conan
          key: conan-linux-codecover

      - name: Setup Conan
        run: |
          pip install conan==1.*
          conan profile new default --detect --force
          conan remote add gitlab https://gitlab.com/api/v4/packages/conan --force
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update conf.tools.system.package_manager:mode=install default
          conan profile update conf.tools.system.package_manager:sudo=True default

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/bin

      - name: Get dependencies with GUI testing
        working-directory: ${{github.workspace}}/bin
        run: conan install .. -s build_type=Release -o build_viewer=True -o with_gui=True -o enable_tests=True -o test_gui=True -o code_coverage=True --build=missing --build=openjpeg
        if: ${{ github.ref == 'refs/heads/tests-coverage-gui' }}

      - name: Get dependencies without GUI testing
        working-directory: ${{github.workspace}}/bin
        run: conan install .. -s build_type=Release -o build_viewer=True -o with_gui=True -o enable_tests=True -o test_gui=False -o code_coverage=True --build=missing --build=openjpeg
        if: ${{ github.ref != 'refs/heads/tests-coverage-gui' }}

      - name: Configure with CMake with GUI testing
        working-directory: ${{github.workspace}}/bin
        run: cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DUSE_CODECOV=1 -DBUILD_TESTS=1 -DBUILD_VIEWER=1 -DUSE_GUI=1 -DTEST_GUI=1
        if: ${{ github.ref == 'refs/heads/tests-coverage-gui' }}

      - name: Configure with CMake without GUI testing
        working-directory: ${{github.workspace}}/bin
        run: cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DUSE_CODECOV=1 -DBUILD_TESTS=1 -DBUILD_VIEWER=1 -DUSE_GUI=1 -DTEST_GUI=0
        if: ${{ github.ref != 'refs/heads/tests-coverage-gui' }}

      - name: List proj dir content
        run: ls ${{github.workspace}}/bin/share/proj

      - name: Build and run code coverage (using xvfb)
        uses: coactions/setup-xvfb@v1
        with:
          run: cmake --build . --config ${{env.BUILD_TYPE}} --target atmoswing-coverage
          working-directory: ${{github.workspace}}/bin

      - name: Preparing coverage data
        working-directory: ${{github.workspace}}/bin
        run: lcov --directory . --capture --output-file coverage.info

      - name: Cleaning up coverage data
        working-directory: ${{github.workspace}}/bin
        run: lcov --remove coverage.info "/usr/*" "*/_deps/*" "*/tests/*" "*/.conan/*" --output-file coverage.info

      - name: Display code coverage report
        working-directory: ${{github.workspace}}/bin
        run: lcov --list coverage.info

      - uses: codecov/codecov-action@v3
        with:
          files: ${{github.workspace}}/bin/coverage.info
          fail_ci_if_error: true
          verbose: true
